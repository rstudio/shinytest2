% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny-driver.R
\name{ShinyDriver2}
\alias{ShinyDriver2}
\title{Remote control a Shiny app running in a headless browser}
\description{
This class starts a Shiny app in a new R session, along with a \pkg{chromote}
headless browser that can be used to simulate user actions. This provides
a full simulation of a Shiny app so that you can test user interactions
with a live app.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ShinyDriver2$new()}}
\item \href{#method-stop}{\code{ShinyDriver2$stop()}}
\item \href{#method-getValue}{\code{ShinyDriver2$getValue()}}
\item \href{#method-setValue}{\code{ShinyDriver2$setValue()}}
\item \href{#method-click}{\code{ShinyDriver2$click()}}
\item \href{#method-getAllValues}{\code{ShinyDriver2$getAllValues()}}
\item \href{#method-sendKeys}{\code{ShinyDriver2$sendKeys()}}
\item \href{#method-setWindowSize}{\code{ShinyDriver2$setWindowSize()}}
\item \href{#method-getWindowSize}{\code{ShinyDriver2$getWindowSize()}}
\item \href{#method-getDebugLog}{\code{ShinyDriver2$getDebugLog()}}
\item \href{#method-enableDebugLogMessages}{\code{ShinyDriver2$enableDebugLogMessages()}}
\item \href{#method-logEvent}{\code{ShinyDriver2$logEvent()}}
\item \href{#method-getEventLog}{\code{ShinyDriver2$getEventLog()}}
\item \href{#method-getUrl}{\code{ShinyDriver2$getUrl()}}
\item \href{#method-getTitle}{\code{ShinyDriver2$getTitle()}}
\item \href{#method-getSource}{\code{ShinyDriver2$getSource()}}
\item \href{#method-goBack}{\code{ShinyDriver2$goBack()}}
\item \href{#method-refresh}{\code{ShinyDriver2$refresh()}}
\item \href{#method-takeScreenshot}{\code{ShinyDriver2$takeScreenshot()}}
\item \href{#method-findElement}{\code{ShinyDriver2$findElement()}}
\item \href{#method-findElements}{\code{ShinyDriver2$findElements()}}
\item \href{#method-waitFor}{\code{ShinyDriver2$waitFor()}}
\item \href{#method-waitForShiny}{\code{ShinyDriver2$waitForShiny()}}
\item \href{#method-waitForValue}{\code{ShinyDriver2$waitForValue()}}
\item \href{#method-listWidgets}{\code{ShinyDriver2$listWidgets()}}
\item \href{#method-checkUniqueWidgetNames}{\code{ShinyDriver2$checkUniqueWidgetNames()}}
\item \href{#method-executeScript}{\code{ShinyDriver2$executeScript()}}
\item \href{#method-executeScriptAsync}{\code{ShinyDriver2$executeScriptAsync()}}
\item \href{#method-findWidget}{\code{ShinyDriver2$findWidget()}}
\item \href{#method-expectUpdate}{\code{ShinyDriver2$expectUpdate()}}
\item \href{#method-setInputs}{\code{ShinyDriver2$setInputs()}}
\item \href{#method-uploadFile}{\code{ShinyDriver2$uploadFile()}}
\item \href{#method-snapshotInit}{\code{ShinyDriver2$snapshotInit()}}
\item \href{#method-snapshotDownload}{\code{ShinyDriver2$snapshotDownload()}}
\item \href{#method-getAppDir}{\code{ShinyDriver2$getAppDir()}}
\item \href{#method-getAppFilename}{\code{ShinyDriver2$getAppFilename()}}
\item \href{#method-isRmd}{\code{ShinyDriver2$isRmd()}}
\item \href{#method-expectSnapshot}{\code{ShinyDriver2$expectSnapshot()}}
\item \href{#method-getSnapshotDir}{\code{ShinyDriver2$getSnapshotDir()}}
\item \href{#method-getRelativePathToApp}{\code{ShinyDriver2$getRelativePathToApp()}}
\item \href{#method-getTestsDir}{\code{ShinyDriver2$getTestsDir()}}
\item \href{#method-snapshotCompare}{\code{ShinyDriver2$snapshotCompare()}}
\item \href{#method-clone}{\code{ShinyDriver2$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$new(
  path = ".",
  ...,
  loadTimeout = NULL,
  screenshot = TRUE,
  checkNames = TRUE,
  name = NULL,
  variant = os_name_and_r_version(),
  debug = c("none", "all", shinytest2::ShinyDriver2$debugLogTypes),
  seed = NULL,
  cleanLogs = TRUE,
  shinyOptions = list(),
  renderArgs = NULL,
  options = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{Path to a directory containing a Shiny app, i.e. a
single \code{app.R} file or a \code{server.R}-\code{ui.R} pair.}

\item{\code{loadTimeout}}{How long to wait for the app to load, in ms.
This includes the time to start R. Defaults to 5s when running
locally and 10s when running on CI. Maximum value is 10s.}

\item{\code{screenshot}}{Take screenshots for each snapshot?}

\item{\code{checkNames}}{Check if widget names are unique?}

\item{\code{name}}{Name of a shiny widget.}

\item{\code{debug}}{Start the app in debugging mode? In debugging mode debug
messages are printed to the console.}

\item{\code{seed}}{An optional random seed to use before starting the application.
For apps that use R's random number generator, this can make their
behavior repeatable.}

\item{\code{cleanLogs}}{Whether to remove the stdout and stderr logs when the
Shiny process object is garbage collected.}

\item{\code{shinyOptions}}{A list of options to pass to \code{\link[shiny:runApp]{shiny::runApp()}}.}

\item{\code{renderArgs}}{Passed to \code{rmarkdown::run()} for interactive \code{.Rmd}s.}

\item{\code{options}}{A list of \code{\link[base:options]{base::options()}} to set in the driver's child
process.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stop"></a>}}
\if{latex}{\out{\hypertarget{method-stop}{}}}
\subsection{Method \code{stop()}}{
Stop the app, the terminate external R process that runs the app and
the phantomjs instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$stop()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getValue"></a>}}
\if{latex}{\out{\hypertarget{method-getValue}{}}}
\subsection{Method \code{getValue()}}{
Finds a widget and queries its value. See the \code{getValue()} method of
\link{Widget2} for more details.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getValue(name, iotype = c("auto", "input", "output"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of a shiny widget.}

\item{\code{iotype}}{Type of the Shiny widget. Usually shinytest2 finds the widgets
by their name, so this is only needed if you use the same name for an
input and output widget.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setValue"></a>}}
\if{latex}{\out{\hypertarget{method-setValue}{}}}
\subsection{Method \code{setValue()}}{
Finds a widget and sets its value. It's a shortcut for \code{findElement()}
plus \code{setValue()}; see the \link{Widget2} documentation for more details.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$setValue(name, value, iotype = c("auto", "input", "output"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of a shiny widget.}

\item{\code{value}}{New value.}

\item{\code{iotype}}{Type of the Shiny widget. Usually shinytest2 finds the widgets
by their name, so this is only needed if you use the same name for an
input and output widget.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-click"></a>}}
\if{latex}{\out{\hypertarget{method-click}{}}}
\subsection{Method \code{click()}}{
Find a widget and click it. It's a shortcut for \code{findElement()}
plus \code{click()}; see the \link{Widget2} documentation for more details.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$click(name, iotype = c("auto", "input", "output"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of a shiny widget.}

\item{\code{iotype}}{Type of the Shiny widget. Usually shinytest2 finds the widgets
by their name, so this is only needed if you use the same name for an
input and output widget.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAllValues"></a>}}
\if{latex}{\out{\hypertarget{method-getAllValues}{}}}
\subsection{Method \code{getAllValues()}}{
Returns a named list of all inputs, outputs, and export values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getAllValues(input = TRUE, output = TRUE, export = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input, output, export}}{Either \code{TRUE} to return all
input/output/exported values, or a character vector of specific
controls.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sendKeys"></a>}}
\if{latex}{\out{\hypertarget{method-sendKeys}{}}}
\subsection{Method \code{sendKeys()}}{
Sends the specified keys to specific HTML element. Shortcut for
\code{findWidget()} plus \code{sendKeys()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$sendKeys(name, keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of a shiny widget.}

\item{\code{keys}}{Keys to send to the widget or the app.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setWindowSize"></a>}}
\if{latex}{\out{\hypertarget{method-setWindowSize}{}}}
\subsection{Method \code{setWindowSize()}}{
Sets size of the browser window.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$setWindowSize(width, height)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{width, height}}{Height and width of browser, in pixels.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getWindowSize"></a>}}
\if{latex}{\out{\hypertarget{method-getWindowSize}{}}}
\subsection{Method \code{getWindowSize()}}{
Get current size of the browser window, as list of integer scalars
named \code{width} and \code{height}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getWindowSize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDebugLog"></a>}}
\if{latex}{\out{\hypertarget{method-getDebugLog}{}}}
\subsection{Method \code{getDebugLog()}}{
Query one or more of the debug logs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getDebugLog(type = c("all", ShinyDriver2$debugLogTypes))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Log type: \code{"all"}, \code{"shiny_console"}, \code{"browser"},
or \code{"shinytest2"}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-enableDebugLogMessages"></a>}}
\if{latex}{\out{\hypertarget{method-enableDebugLogMessages}{}}}
\subsection{Method \code{enableDebugLogMessages()}}{
Enable/disable debugging messages
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$enableDebugLogMessages(enable = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{enable}}{New value.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-logEvent"></a>}}
\if{latex}{\out{\hypertarget{method-logEvent}{}}}
\subsection{Method \code{logEvent()}}{
Add event to log.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$logEvent(event, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{event}}{Event name}

\item{\code{...}}{Addition data to store for event}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getEventLog"></a>}}
\if{latex}{\out{\hypertarget{method-getEventLog}{}}}
\subsection{Method \code{getEventLog()}}{
Retrieve event log.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getEventLog()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getUrl"></a>}}
\if{latex}{\out{\hypertarget{method-getUrl}{}}}
\subsection{Method \code{getUrl()}}{
Get current url
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getUrl()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTitle"></a>}}
\if{latex}{\out{\hypertarget{method-getTitle}{}}}
\subsection{Method \code{getTitle()}}{
Get page title
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getTitle()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSource"></a>}}
\if{latex}{\out{\hypertarget{method-getSource}{}}}
\subsection{Method \code{getSource()}}{
Get complete source of current page.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getSource()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-goBack"></a>}}
\if{latex}{\out{\hypertarget{method-goBack}{}}}
\subsection{Method \code{goBack()}}{
Return to previous page
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$goBack()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-refresh"></a>}}
\if{latex}{\out{\hypertarget{method-refresh}{}}}
\subsection{Method \code{refresh()}}{
Refresh the browser
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$refresh()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-takeScreenshot"></a>}}
\if{latex}{\out{\hypertarget{method-takeScreenshot}{}}}
\subsection{Method \code{takeScreenshot()}}{
Takes a screenshot of the current page and writes it to a PNG file or
shows on current graphics device.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$takeScreenshot(
  filename = NULL,
  ...,
  selector = "html",
  cliprect = NULL,
  region = c("content", "padding", "border", "margin"),
  expand = NULL,
  scale = 1,
  wait_ = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait_}}{Wait until all reactive updates have completed?}

\item{\code{file}}{File name to save the screenshot to. If \code{NULL}, then
it will be shown on the R graphics device.}

\item{\code{id}}{If not-\code{NULL}, will take a screenshot of element with this id.}

\item{\code{parent}}{If \code{TRUE}, will take screenshot of parent of \code{id}; this
is useful if you also want to capture the label attached to a Shiny
control.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findElement"></a>}}
\if{latex}{\out{\hypertarget{method-findElement}{}}}
\subsection{Method \code{findElement()}}{
Find an HTML element on the page, using a CSS selector, XPath expression,
or link text (for \verb{<a>} tags). If multiple elements are matched, only
the first is returned.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$findElement(css = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{css}}{CSS selector to find an HTML element.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findElements"></a>}}
\if{latex}{\out{\hypertarget{method-findElements}{}}}
\subsection{Method \code{findElements()}}{
Find all elements matching CSS selection, xpath, or link text.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$findElements(css = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{css}}{CSS selector to find an HTML element.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-waitFor"></a>}}
\if{latex}{\out{\hypertarget{method-waitFor}{}}}
\subsection{Method \code{waitFor()}}{
Waits until a JavaScript \code{expr}ession evaluates to \code{true} or the
\code{timeout} is exceeded.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$waitFor(expr, checkInterval = 100, timeout = 3000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{A string containing JavaScript code. Will wait until the
condition returns \code{true}.}

\item{\code{checkInterval}}{How often to check for the condition, in ms.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if expression evaluates to \code{true} without error, before
timeout. Otherwise returns \code{NA}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-waitForShiny"></a>}}
\if{latex}{\out{\hypertarget{method-waitForShiny}{}}}
\subsection{Method \code{waitForShiny()}}{
Waits until Shiny is not busy, i.e. the reactive graph has finished
updating. This is useful, for example, if you've resized the window with
\code{setWindowSize()} and want to make sure all plot redrawing is complete
before take a screenshot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$waitForShiny()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if done before before timeout; \code{NA} otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-waitForValue"></a>}}
\if{latex}{\out{\hypertarget{method-waitForValue}{}}}
\subsection{Method \code{waitForValue()}}{
Waits until the \code{input} or \code{output} with name \code{name} is not one of
\code{ignore}d values, or the timeout is reached.

This function can be useful in helping determine if an application
has initialized or finished processing a complex reactive situation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$waitForValue(
  name,
  ignore = list(NULL, ""),
  iotype = c("input", "output", "export"),
  timeout = 10000,
  checkInterval = 400
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of a shiny widget.}

\item{\code{ignore}}{List of possible values to ignore when checking for
updates.}

\item{\code{iotype}}{Type of the Shiny widget. Usually shinytest2 finds the widgets
by their name, so this is only needed if you use the same name for an
input and output widget.}

\item{\code{checkInterval}}{How often to check for the condition, in ms.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listWidgets"></a>}}
\if{latex}{\out{\hypertarget{method-listWidgets}{}}}
\subsection{Method \code{listWidgets()}}{
Lists the names of all input and output widgets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$listWidgets()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of two character vectors, named \code{input} and \code{output}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-checkUniqueWidgetNames"></a>}}
\if{latex}{\out{\hypertarget{method-checkUniqueWidgetNames}{}}}
\subsection{Method \code{checkUniqueWidgetNames()}}{
Check if Shiny widget names are unique.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$checkUniqueWidgetNames()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-executeScript"></a>}}
\if{latex}{\out{\hypertarget{method-executeScript}{}}}
\subsection{Method \code{executeScript()}}{
Execute JS code
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$executeScript(script, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{script}}{JS to execute. If a JS Promise is returned, \verb{$executeScript()} will wait for the promise to resolve before returning.}

\item{\code{...}}{Additional arguments to script.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-executeScriptAsync"></a>}}
\if{latex}{\out{\hypertarget{method-executeScriptAsync}{}}}
\subsection{Method \code{executeScriptAsync()}}{
Execute JS code asynchronously.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$executeScriptAsync(script, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{script}}{JS to execute. If a JS Promise is returned, \verb{$executeScriptAsync()} will return and not wait for the promise to resolved.}

\item{\code{...}}{Additional arguments to script.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findWidget"></a>}}
\if{latex}{\out{\hypertarget{method-findWidget}{}}}
\subsection{Method \code{findWidget()}}{
Finds the a Shiny input or output control.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$findWidget(name, iotype = c("auto", "input", "output"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of a shiny widget.}

\item{\code{iotype}}{Type of the Shiny widget. Usually shinytest2 finds the widgets
by their name, so this is only needed if you use the same name for an
input and output widget.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \link{Widget2}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expectUpdate"></a>}}
\if{latex}{\out{\hypertarget{method-expectUpdate}{}}}
\subsection{Method \code{expectUpdate()}}{
It performs one or more update operations via the browser, thens
waits for the specified output(s) to update. The test succeeds if
all specified output widgets are updated before the \code{timeout}.
For updates that involve a lot of computation, increase the timeout.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$expectUpdate(
  output,
  ...,
  timeout = 3000,
  iotype = c("auto", "input", "output")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{output}}{Name of output control to check.}

\item{\code{...}}{Name-value pairs used to update inputs.}

\item{\code{iotype}}{Type of the Shiny widget. Usually shinytest2 finds the widgets
by their name, so this is only needed if you use the same name for an
input and output widget.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setInputs"></a>}}
\if{latex}{\out{\hypertarget{method-setInputs}{}}}
\subsection{Method \code{setInputs()}}{
Sets input values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$setInputs(
  ...,
  wait_ = TRUE,
  values_ = TRUE,
  timeout_ = 3000,
  allowInputNoBinding_ = FALSE,
  priority_ = c("input", "event")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Name-value pairs, \verb{name1 = value1, name2 = value2} etc.
Enput with name \code{name1} will be assigned value \code{value1}.}

\item{\code{wait_}}{Wait until all reactive updates have completed?}

\item{\code{values_}}{If \code{TRUE}, will return final updated values of inputs.}

\item{\code{allowInputNoBinding_}}{When setting the value of an input, allow
it to set the value of an input even if that input does not have
an input binding.}

\item{\code{priority_}}{Sets the event priority. For expert use only: see
\url{https://shiny.rstudio.com/articles/communicating-with-js.html#values-vs-events} for details.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns updated values, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-uploadFile"></a>}}
\if{latex}{\out{\hypertarget{method-uploadFile}{}}}
\subsection{Method \code{uploadFile()}}{
Uploads a file to a file input.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$uploadFile(..., wait_ = TRUE, values_ = TRUE, timeout_ = 3000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Name-path pairs, e.g. \code{name1 = path1}. The file located at
\code{path1} will be uploaded to file input with name \code{name1}.}

\item{\code{wait_}}{Wait until all reactive updates have completed?}

\item{\code{values_}}{If \code{TRUE}, will return final updated values of download
control.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-snapshotInit"></a>}}
\if{latex}{\out{\hypertarget{method-snapshotInit}{}}}
\subsection{Method \code{snapshotInit()}}{
Download a snapshot. Generally, you should not call this function
yourself; it will be generated by \code{recordTest()} as needed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$snapshotInit(path, screenshot = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{Directory to save snapshots.}

\item{\code{screenshot}}{Take screenshots for each snapshot?}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-snapshotDownload"></a>}}
\if{latex}{\out{\hypertarget{method-snapshotDownload}{}}}
\subsection{Method \code{snapshotDownload()}}{
Snapshot a file download action. Generally, you should not call this
function yourself; it will be generated by \code{recordTest()} as needed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$snapshotDownload(id, filename = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Output id of \code{\link[shiny:downloadButton]{shiny::downloadButton()}}/\code{\link[shiny:downloadButton]{shiny::downloadLink()}}}

\item{\code{filename}}{File name to save file to. The default, \code{NULL},
generates an ascending sequence of names: \verb{001.download},
\verb{002.download}, etc.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAppDir"></a>}}
\if{latex}{\out{\hypertarget{method-getAppDir}{}}}
\subsection{Method \code{getAppDir()}}{
Directory where app is located
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getAppDir()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAppFilename"></a>}}
\if{latex}{\out{\hypertarget{method-getAppFilename}{}}}
\subsection{Method \code{getAppFilename()}}{
App file name, i.e. \code{app.R} or \code{server.R}. \code{NULL} for Rmds.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getAppFilename()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isRmd"></a>}}
\if{latex}{\out{\hypertarget{method-isRmd}{}}}
\subsection{Method \code{isRmd()}}{
Is this app an Shiny Rmd document?
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$isRmd()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expectSnapshot"></a>}}
\if{latex}{\out{\hypertarget{method-expectSnapshot}{}}}
\subsection{Method \code{expectSnapshot()}}{
Internal method. Generally, you should not call this function
yourself; it will be generated by \code{recordTest()} as needed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$expectSnapshot(
  ...,
  name = NULL,
  items = NULL,
  screenshot = NULL,
  cran = FALSE,
  error = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of a shiny widget.}

\item{\code{items}}{Elements to include in snapshot}

\item{\code{screenshot}}{Take a screenshot? Overrides value set by
\verb{$snapshotInit()}}

\item{\code{filename}}{Filename to use}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSnapshotDir"></a>}}
\if{latex}{\out{\hypertarget{method-getSnapshotDir}{}}}
\subsection{Method \code{getSnapshotDir()}}{
Internal method. Retrieve temporary directory where snapshots are stored.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getSnapshotDir()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getRelativePathToApp"></a>}}
\if{latex}{\out{\hypertarget{method-getRelativePathToApp}{}}}
\subsection{Method \code{getRelativePathToApp()}}{
Deprecated.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getRelativePathToApp()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTestsDir"></a>}}
\if{latex}{\out{\hypertarget{method-getTestsDir}{}}}
\subsection{Method \code{getTestsDir()}}{
Directory where tests are located
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$getTestsDir()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-snapshotCompare"></a>}}
\if{latex}{\out{\hypertarget{method-snapshotCompare}{}}}
\subsection{Method \code{snapshotCompare()}}{
Deprecated.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$snapshotCompare(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyDriver2$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
